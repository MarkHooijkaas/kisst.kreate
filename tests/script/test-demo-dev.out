apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    eks.amazonaws.com/role-arn: some-role-dev
  name: demo-serviceaccount
  namespace: demo-dev
---
apiVersion: v1
data:
  ENV: dev
  ORACLE_SCHEMA: demo_schema_dev
  ORACLE_URL: localhost:1521
  ORACLE_USR: demo_usr_DEV
kind: ConfigMap
metadata:
  labels:
    config-map: demo-vars
  name: demo-vars
  namespace: demo-dev
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: demo
  name: demo-service
  namespace: demo-dev
spec:
  clusterIP: None
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: demo
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: demo
  name: demo-service-https
  namespace: demo-dev
spec:
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: 443
  selector:
    app: demo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo
  namespace: demo-dev
spec:
  replicas: 0
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: demo
  template:
    metadata:
      annotations:
        app.kubernetes.io/component: webservice
        app.kubernetes.io/managed-by: kustomize
        app.kubernetes.io/name: demo
        app.kubernetes.io/part-of: kreate-demo
        app.kubernetes.io/version: v1.3.4
        co.elastic.logs/enabled: "true"
        co.elastic.logs/exclude_lines: DEBUG
      labels:
        app: demo
        egress-to-db: enabled
      name: demo
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - demo
            topologyKey: kubernetes.io/hostname
      containers:
      - envFrom:
        - secretRef:
            name: demo-secrets
        - configMapRef:
            name: demo-vars
        image: https://repo.kisst.org/demo.app:v1.3.4
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: actuator/info
            port: 8080
            scheme: HTTP
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 1
        name: app
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          failureThreshold: 1
          httpGet:
            path: actuator/info
            port: 8080
            scheme: HTTP
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 500m
            memory: 512M
          requests:
            cpu: 100m
            memory: 512M
        startupProbe:
          failureThreshold: 120
          httpGet:
            path: actuator/info
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 1
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    testje: test
  name: demo-pdb
  namespace: demo-dev
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: demo
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: demo-servicemonitor
  namespace: demo-dev
spec:
  endpoints:
  - interval: 20s
    path: /actuator/prometheus
    port: http
  namespaceSelector:
    matchNames:
    - demo-dev
  selector:
    matchLabels:
      app: demo
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    app.kubernetes.io/name: demo
  name: demo-ingress-api
  namespace: demo-dev
spec:
  rules:
  - host: private.kisst.org
    http:
      paths:
      - backend:
          service:
            name: demo-ingress-api
            port:
              number: 8080
        path: /api
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    app.kubernetes.io/name: demo
    nginx.ingress.kubernetes.io/affinity: cookie
    nginx.ingress.kubernetes.io/auth-realm: demo-realm
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/whitelist-source-range: ggg
  labels:
    dummy: jan
  name: demo-ingress-root
  namespace: demo-dev
spec:
  rules:
  - host: private.kisst.org
    http:
      paths:
      - backend:
          service:
            name: demo-ingress-root
            port:
              number: 8080
        path: /
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: egress-to-db
  namespace: demo-dev
spec:
  egress:
  - ports:
    - port: 1521
      protocol: TCP
    to:
    - ipBlock:
        cidr: 1.2.3.4/32
  podSelector:
    matchLabels:
      egress-to-db: enabled
  policyTypes:
  - Egress
